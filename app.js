#!/usr/bin/env node

'use strict';

/* 
 * Requires
 */

var geojsonExtent = require('geojson-extent'),
    jsdom = require('jsdom'),
    fs = require('fs'),
    __ = require('underscore'),
    path = require('path'),
    readMultipleFiles = require('read-multiple-files');


/* 
 * Configs
 */


var config = {

    "name": "ireland",
    "flag": {
        "size": [1000, 500] // "size": [3200, 1600]
    }

};


// test if geojson file exists

fs.open('data/' + config.name + '.geojson', 'r', function(err, fd) {

    if (err) {

        console.log("Error opening geojson file !");

    } else {

        /* 
         * Generate colour json file from geojson
         */

        if (process.argv.slice(2) == '-colours') {

            generateColours();

        } else {

            // check for colours file exists

            fs.open('data/' + config.name + '.colours.json', 'r', function(err, fd) {

                if (err) {

                    console.log("Error opening colours file! This file can be generated by issuing:");

                    console.log("node app.js -colours");

                } else {

                    // read in the geojson and flag colour files

                    readMultipleFiles(['data/' + config.name + '.geojson', 'data/' + config.name + '.colours.json'], 'utf8', function(err, files) {
                        if (err) {
                            throw err;
                        }
                        
                        console.log('Opening files...');

                        var areaData = [];

                        var geojson = JSON.parse(files[0]);

                        var flags = JSON.parse(files[1]);

                        for (var i = 0; i < geojson.features.length; i++) {

                            var flag = __.find(flags.flags, {
                                name: geojson.features[i].properties.name
                            });

                            var area = {
                                "name": geojson.features[i].properties.name,
                                "lng": geojsonExtent(geojson.features[i])[0], // get the most westerly point                  
                                "colours": flag.colours

                            };

                            areaData.push(area);

                        }

                        areaData.sort(function(a, b) {
                            return parseFloat(a.lng) - parseFloat(b.lng)
                        });

                        // draw flag
                        drawFlag(areaData);
                        
                    });

                }

            });

        }

    }

});


/*
 * Functions
 */


function drawFlag(areas) {

    console.log("Generating svg image");


    jsdom.env(
        "<html><body></body></html>", // create DOM
        ['http://d3js.org/d3.v3.min.js', // JS dependencies
            'js/d3.v3.min.js'
        ],

        function(err, window) {

            // generate svg
            var svg = window.d3.select("body")
                .append("svg")
                .attr("width", config.flag.size[0])
                .attr("height", config.flag.size[1]);

            var childFlagWidth = config.flag.size[0] / areas.length;

            //draw loop

            for (var c = 0; c < areas.length; c++) {

                var childFlagOffset = childFlagWidth * c;

                for (var f = 0; f < areas[c].colours.length; f++) {

                    var childFlagSectionOffset = (childFlagWidth / areas[c].colours.length) * f;

                    // generate flag sections
                    svg.append("rect")
                        .attr("id", areas[c].name.replace('', '-') + "-" + f)
                        .attr("x", childFlagSectionOffset + childFlagOffset) //offset
                        .attr("y", 0)
                        .attr("width", childFlagWidth / areas[c].colours.length)
                        .attr("height", config.flag.size[1])
                        .style("fill", areas[c].colours[f]);

                }

            }

            // save file
            fs.writeFile('output/' + config.name + '.svg', window.d3.select("body").html(), function(err) {
            
                if (err) {
                
                    console.log(err);
                    
                } else {
                
                    console.log('Done...');
                    console.log('...created output/' + config.name + '.svg');
                    
                }

            });

        });

}



function generateColours() {

    console.log("Generating colours file");

    var outFile = 'data/' + config.name + '.colours.json';

    fs.readFile('data/' + config.name + '.geojson', 'utf8', function(err, data) {
        if (err) throw err;

        var geojson = JSON.parse(data);

        var colours = {
            "flags": []
        };

        for (var f = 0; f < geojson.features.length; f++) {

            var flag = {
                "name": geojson.features[f].properties.name,
                "colours": []
            }

            colours.flags.push(flag);

        }

        fs.writeFile(outFile, JSON.stringify(colours, null, 3), function(err) {
            if (err) {
                console.log(err);
            } else {
                console.log("Colours skeleton saved to " + outFile);
            }

        });

    });

}